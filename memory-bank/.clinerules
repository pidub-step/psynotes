clinerules - Project Intelligence for Medical Note Transcription App

## Project Patterns and Preferences

This file captures important patterns preferences and project intelligence for the Medical Note Transcription App. It will be updated as we discover new insights during development.

## Code Style and Organization

1. **Frontend Code Organization**
   - Next.js App Router structure
   - Component-based architecture
   - TypeScript for type safety
   - Functional components with hooks

2. **Backend Code Organization**
   - FastAPI for the transcription service
   - FastAPI for the structured notes service
   - RESTful API design
   - Async/await for asynchronous operations
   - Environment variables for configuration

3. **Naming Conventions**
   - camelCase for JavaScript/TypeScript variables and functions
   - PascalCase for React components
   - snake_case for Python variables and functions
   - UPPER_CASE for constants and environment variables

4. **Syntax Patterns**
   - Proper comma separation between imports and function parameters
   - Consistent use of semicolons
   - Proper object and array syntax
   - Consistent indentation and formatting

## Implementation Patterns

1. **Audio Recording**
   - Use Recorder.js for high-quality WAV recording
   - Implement start/stop controls with visual feedback
   - Display recording timer for user awareness
   - Handle browser permissions appropriately

2. **File Upload**
   - Direct upload to Supabase Storage
   - Show progress indicator during upload
   - Handle upload errors with retry mechanism
   - Generate unique file names with timestamps

3. **Transcription Processing**
   - Use ffmpeg for audio file splitting
   - Maintain high audio quality (44.1kHz stereo WAV)
   - Use OpenAI gpt-4o-transcribe or gpt-4o-mini-transcribe models for transcription
   - Combine split transcriptions seamlessly
   - Store results in PostgreSQL

4. **Structured Notes Generation**
   - Use OpenAI GPT-4 for structured note generation
   - Transform raw transcriptions into structured medical notes
   - Follow specific formatting rules for medical notes
   - Handle special cases like "normal" physical exams
   - Replace medical terminology (e.g., "hypertension" to "HTA")

5. **Status Updates**
   - Use Supabase Realtime for live updates
   - Implement optimistic UI updates for better UX
   - Clear status indicators in the UI
   - Appropriate error messages for failures
   - Webhook-style updates from transcription service to frontend

6. **UI Performance Optimization**
   - Avoid polling mechanisms that cause UI flashing
   - Use Supabase Realtime for efficient updates
   - Handle events individually rather than refetching all data
   - Implement optimistic UI updates for immediate feedback
   - Consider disabling React Strict Mode in development for smoother experience

7. **Environment Variable Handling**
   - Use .env files for local development
   - Create .env.example files with placeholders
   - Configure .gitignore to prevent committing sensitive information
   - Use environment variables for all sensitive information
   - Remove API keys from git history if accidentally committed

## User Experience Patterns

1. **Mobile Compatibility**
   - Test thoroughly on Safari for iOS
   - Responsive design for all screen sizes
   - Touch-friendly controls
   - Consider battery and data usage

2. **Loading States**
   - Clear visual indicators for all async operations
   - Disable controls during processing
   - Status badges for transcription state (processing completed error)

3. **Error Handling**
   - User-friendly error messages
   - Automatic retry for transient errors
   - Fallback options where possible
   - Clear next steps for user when errors occur

4. **Modal Interactions**
   - Use modals for focused tasks (structured note editing)
   - Provide clear actions (save, copy)
   - Maintain context while providing detailed view
   - Ensure modals are responsive on all devices

## Development Workflow

1. **Local Development**
   - Next.js development server for frontend
   - Local FastAPI server for transcription service
   - Local FastAPI server for structured notes service
   - Supabase project for storage and database
   - Environment variables for configuration
   - Run npm commands from the correct directory (medical-note-transcriber)

2. **Testing Strategy**
   - Component tests for UI elements
   - Integration tests for API endpoints
   - End-to-end tests for critical flows
   - Manual testing on mobile devices

3. **Deployment Process**
   - Vercel for frontend deployment
   - Heroku or similar for transcription service
   - Heroku or similar for structured notes service
   - Environment-specific configuration
   - Ensure ffmpeg availability in deployment environment

4. **Git Repository Management**
   - Keep all project files in a single repository
   - Avoid using git submodules for better developer experience
   - Use feature branches for new functionality
   - Merge changes through pull requests
   - Force push when necessary to ensure synchronization
   - Resolve merge conflicts carefully

## Known Challenges and Solutions

1. **Safari Audio Recording**
   - Challenge: Safari has specific requirements for audio recording
   - Solution: Use appropriate permissions and context
   - Reference: Check browser compatibility before recording

2. **Large File Handling**
   - Challenge: Long recordings create large WAV files
   - Solution: Use ffmpeg to split files into manageable chunks
   - Reference: Maintain high quality (44.1kHz stereo) for better transcription

3. **Processing Time Expectations**
   - Challenge: Transcription takes time especially for long recordings
   - Solution: Clear status updates and progress indicators
   - Reference: Set appropriate user expectations

4. **ffmpeg Dependency**
   - Challenge: Transcription service requires ffmpeg
   - Solution: Document dependency and ensure availability in deployment
   - Reference: Include installation instructions in README

5. **API Communication**
   - Challenge: Frontend needs to communicate with transcription service
   - Solution: Use Next.js API routes as a bridge
   - Reference: Implement webhook-style updates for status changes

6. **UI Performance**
   - Challenge: Frequent updates can cause UI flashing
   - Solution: Use Supabase Realtime with optimized event handling
   - Reference: Handle events individually rather than refetching all data

7. **Git Repository Structure**
   - Challenge: Submodules can complicate development workflow
   - Solution: Convert submodules to regular directories
   - Reference: Simplify repository structure for better developer experience

8. **Syntax Errors**
   - Challenge: Missing commas and syntax errors can cause runtime issues
   - Solution: Careful code review and consistent formatting
   - Reference: Pay special attention to imports and function parameters

9. **Command Execution Path**
   - Challenge: npm commands must be run from the correct directory
   - Solution: Added root package.json that forwards commands to medical-note-transcriber directory
   - Reference: Root package.json contains scripts that cd into medical-note-transcriber before running commands

10. **API Key Security**
    - Challenge: API keys must be kept secure
    - Solution: Use environment variables, .env.example files, proper .gitignore configuration
    - Reference: Remove sensitive information from git history if accidentally committed

11. **Cross-Origin Requests**
    - Challenge: Browser security prevents cross-origin requests
    - Solution: Implement CORS middleware in backend services
    - Reference: Configure appropriate CORS headers for all API endpoints

## New Technical Insights

1. **Audio Quality Considerations**
   - High-quality audio (44.1kHz stereo WAV) produces better transcription results
   - This increases file size but improves accuracy for medical terminology
   - ffmpeg provides flexible options for audio processing while maintaining quality

2. **Transcription Service Architecture**
   - FastAPI with background tasks works well for asynchronous processing
   - Splitting audio files allows handling recordings of any length
   - Temporary file handling requires careful cleanup to avoid resource leaks

3. **Structured Notes Service Architecture**
   - Separate service provides clear separation of concerns
   - GPT-4 is effective for transforming raw transcriptions into structured notes
   - CORS middleware is essential for cross-origin requests from the frontend

4. **Supabase Integration**
   - Signed URLs provide secure access to stored audio files
   - Storage policies need careful configuration for proper access control
   - Database schema should include status tracking for transcription process
   - Realtime subscriptions provide efficient updates without polling

5. **Error Recovery Mechanisms**
   - Implement comprehensive error handling in the transcription service
   - Use try/catch blocks with specific error types
   - Update transcription status to 'error' when issues occur
   - Provide clear error messages to the frontend

6. **UI Performance Optimization**
   - Polling mechanisms can cause UI flashing and should be avoided
   - Supabase Realtime provides efficient updates without polling
   - Optimistic UI updates provide immediate feedback to users
   - React Strict Mode can cause double-rendering in development

7. **Git Repository Management**
   - Submodules can complicate development workflow
   - Converting submodules to regular directories simplifies repository structure
   - Single repository approach improves developer experience
   - Feature branches provide isolation for new functionality
   - Force push can be necessary to ensure synchronization between local and remote

8. **Code Quality and Maintenance**
   - Proper syntax and formatting are critical for application stability
   - Missing commas in imports and function parameters can cause runtime errors
   - Duplicate component definitions can lead to conflicts
   - Consistent error handling improves application reliability
   - Regular testing ensures all components work together correctly

9. **Environment Variable Handling**
   - .env files should never be committed to the repository
   - .env.example files provide templates for required variables
   - .gitignore configuration prevents committing sensitive information
   - API keys should be stored securely in environment variables
   - Accidentally committed API keys should be removed from git history

10. **Modal Component Implementation**
    - Modals provide focused UI for specific tasks
    - Editing capabilities require state management
    - Save and copy actions need clear user feedback
    - Modals should be responsive on all devices
    - Keyboard accessibility is important for usability

## Project Evolution

This section tracks key decisions and changes as the project evolves:

- **Initial Setup (March 22, 2025)**: Project initialized with memory bank
- **Technology Selection (March 22, 2025)**: Next.js, Supabase, FastAPI, OpenAI gpt-4o-transcribe models
- **MCP Servers (March 22, 2025)**: Created MCP servers for Supabase and Vercel integration
- **Frontend Implementation (March 22, 2025)**: Implemented recording, upload, and transcription display
- **Backend Implementation (March 22, 2025)**: Implemented transcription service with OpenAI gpt-4o-transcribe integration
- **Audio Processing (March 22, 2025)**: Added ffmpeg for high-quality audio processing
- **API Integration (March 22, 2025)**: Connected frontend and backend with API routes
- **UI Performance (March 22, 2025)**: Fixed flashing issue by optimizing Supabase Realtime subscription
- **Repository Structure (March 22, 2025)**: Converted medical-note-transcriber from submodule to regular directory
- **Transcription Service (March 22, 2025)**: Successfully started service with gpt-4o-transcribe model
- **Bug Fixes (March 23, 2025)**: Fixed syntax errors in record and transcriptions pages
- **Workflow Improvement (March 23, 2025)**: Fixed npm run dev execution path issue
- **Repository Synchronization (March 23, 2025)**: Force pushed local code to GitHub
- **Structured Notes Feature (March 25, 2025)**: Implemented structured notes generation with GPT-4
- **UI Enhancement (March 25, 2025)**: Added StructuredNoteModal component for viewing and editing
- **API Enhancement (March 25, 2025)**: Added update-transcription-text endpoint
- **Security Improvement (March 25, 2025)**: Fixed environment variable handling to prevent exposing API keys
- **Conflict Resolution (March 25, 2025)**: Resolved merge conflicts in structured notes service files

## MCP Server Usage

This section documents how to use the MCP servers created for this project:

1. **Supabase MCP Server**
   - Used for interacting with Supabase services (storage, database, edge functions)
   - Requires SUPABASE_URL and SUPABASE_KEY environment variables
   - Example usage:
     ```
     <use_mcp_tool>
     <server_name>supabase</server_name>
     <tool_name>create_bucket</tool_name>
     <arguments>
     {
       "name": "medical-notes",
       "public": false
     }
     </arguments>
     </use_mcp_tool>
     ```

2. **Vercel MCP Server**
   - Used for interacting with Vercel services (projects, deployments, domains)
   - Requires VERCEL_TOKEN environment variable (VERCEL_TEAM_ID is optional)
   - Example usage:
     ```
     <use_mcp_tool>
     <server_name>vercel</server_name>
     <tool_name>list_projects</tool_name>
     <arguments>
     {
       "limit": 10
     }
     </arguments>
     </use_mcp_tool>
     ```

## User Preferences

This section captures user preferences and feedback as we gather it:

- Preference for high-quality audio transcription over faster processing
- Need for clear status indicators during transcription process
- Importance of mobile compatibility, especially on Safari
- Preference for smooth UI without flashing or reloading
- Preference for simplified git repository structure
- Importance of proper syntax and code formatting
- Preference for running the application from the correct directory
- Preference for structured medical notes with specific formatting
- Importance of secure handling of API keys and sensitive information
- Preference for modal-based editing of structured notes

## Common Issues and Solutions

1. **npm run dev Error**
   - Issue: "npm error code ENOENT" when running npm run dev
   - Cause: Command executed from the wrong directory (missing package.json)
   - Solution: Added root package.json that forwards commands to medical-note-transcriber directory
   - Example: Root package.json contains `"dev": "cd medical-note-transcriber && npm run dev"`

2. **Syntax Errors in TypeScript Files**
   - Issue: Missing commas between imports or function parameters
   - Cause: Incorrect syntax in TypeScript files
   - Solution: Ensure proper comma separation and consistent formatting
   - Example: `import { useState, useEffect, useRef } from 'react';`

3. **Duplicate Component Definitions**
   - Issue: "the name is defined multiple times" error
   - Cause: Multiple definitions of the same component in a file
   - Solution: Remove duplicate definitions and ensure single export
   - Example: Remove duplicate `export default function TranscriptionsPage()`

4. **GitHub Repository Synchronization**
   - Issue: Local and remote repositories out of sync
   - Cause: Different code versions or history
   - Solution: Force push local code to GitHub when necessary
   - Example: `git add . && git commit -m "Fix syntax errors" && git push -f origin main`

5. **API Key Exposure**
   - Issue: API keys accidentally committed to the repository
   - Cause: .env file not in .gitignore or keys hardcoded in source files
   - Solution: Remove keys from git history, update .gitignore, use .env.example
   - Example: `git rm --cached structured-notes-service/.env && git commit --amend -m "Remove API key"`

6. **CORS Errors**
   - Issue: "Access to fetch at 'http://localhost:8002' from origin 'http://localhost:3000' has been blocked by CORS policy"
   - Cause: Missing CORS headers in backend service
   - Solution: Implement CORS middleware in FastAPI service
   - Example: Add `app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"])`

7. **Merge Conflicts**
   - Issue: Conflicts when merging branches
   - Cause: Same files modified in different branches
   - Solution: Carefully resolve conflicts, keeping changes from both branches as appropriate
   - Example: Resolve conflicts in .env.example by using placeholders with hyphens instead of underscores

---

Note: This .clinerules file is a living document that will grow and evolve as we work on the project. It captures project intelligence that might not be obvious from the code alone.
